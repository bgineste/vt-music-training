import { useBlockProps } from '@wordpress/block-editor';
//import { useState } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
import { TextControl, RadioControl, ToggleControl, Button, PanelBody } from '@wordpress/components';
import { useState, useRef } from '@wordpress/element';
import './editor.scss';
import { uploadFileToServer, deleteFileFromServer } from '../../js/vt-files-mngt.js';

export default function Edit(props) {
    const blockProps = useBlockProps();
    const { context, attributes, setAttributes, clientId } = props;
    const { "bloc-fichiers-de-travail/cheminFichiers": cheminFichiers } = context;
    const { cheminFichier, typeFichier, affichageClavier, fichierStereo } = attributes;

    // Initialisation du chemin si absent
    if (!cheminFichier) {
        setAttributes({ cheminFichier: cheminFichiers });
    }
	const fileInputRefs = useRef({});
//	const [uploading, setUploading] = useState(false);
//	const [erreurUpload, setErreurUpload] = useState(null);
	
//	let cheminFichierServer = [];
//	let nomFichierServer = [];
//	const [nomFichierServer, setNomFichierServer] = useState("");
//	const nomCheminFichierServeurRefs = useRef({});
	const paramsPupitresRefs = useRef({});
	const pNomFichier = 0;
	const pCheminFichier = 1;
	const pUploading = 2;
	const pErreurUpload = 3;
	
	let indexParamsPupitre = ""; // pour simplifier l'√©criture de l'index de paramsPupitreRefs
	

const handleFileChange = async (e, keyGroup, keyFile) => {
	const fileNew = e.target.files[0];
	const indexParams = `${keyGroup}-${keyFile}`;
	console.log(e.target);
	if (!fileNew) return;
	console.log("Index courants : " + keyGroup + "/" + keyFile);
	console.log(paramsPupitresRefs);
	
//	setUploading(true);
	paramsPupitresRefs.current[indexParams][pUploading] = true;
//	setErreurUpload(null);
	paramsPupitresRefs.current[indexParams][pErreurUpload] = null;

	let cheminFichier = paramsPupitresRefs.current[`${keyGroup}-${keyFile}`][pCheminFichier];
	let nomFichierPrec = paramsPupitresRefs.current[`${keyGroup}-${keyFile}`][pNomFichier];
	try {
		// 1. Supprimer le fichier pr√©c√©dent s'il existe

		if (nomFichierPrec) {
			console.log("suppression " + nomFichierPrec);
			const resultDel = await deleteFileFromServer(nomFichierPrec, cheminFichier); // dans vt-files-mngt.js
			console.log(resultDel.comment);
		}

		// 2. Uploader le nouveau fichier
		
		const resultUpload = await uploadFileToServer(fileNew, cheminFichier); // dans vt-files-mngt.js
		console.log(resultUpload);
		updateFile(keyGroup, keyFile, 'nomfichier', resultUpload.nom);
		paramsPupitresRefs.current[indexParams][pNomFichier] = resultUpload.nom;
		
		console.log("Upload " + resultUpload.chemin + " - " + resultUpload.nom);
	} catch (err) {
		console.error(err);
		paramsPupitresRefs.current[indexParams][pErreurUpload] = err.message;
	} finally {
		paramsPupitresRefs.current[indexParams][pUploading] = false;
	}
}
//	const fullUrl = `${cheminFichierServer}/${nomFichierServer}`;

//---------------------------------------------------------------------------------------

	// Styles particuliers
	const boutonCommande = "font-size: 23px; font-weight: 600; border: white 2px solid;	border-radius: 8px; margin-right: 10px;"
//---------------------------------------------------------------------------------------

    // Parse JSON string into an object for internal manipulation
    const initialGroups = attributes.chaineFichiersPupitre ? JSON.parse(attributes.chaineFichiersPupitre) : [];
    const [groups, setGroups] = useState(initialGroups);

    const saveGroupsToAttributes = (updatedGroups) => {
        // Convert the object back to a JSON string before saving to attributes
        const jsonString = JSON.stringify(updatedGroups);
        setAttributes({ chaineFichiersPupitre: jsonString });
        setGroups(updatedGroups);
    };

    const addGroup = () => {
        const updatedGroups = [...groups, { titre: '', fichiers: [] }];
        saveGroupsToAttributes(updatedGroups);
    };

    const removeGroup = (index) => {
        const updatedGroups = [...groups];
        updatedGroups.splice(index, 1);
        saveGroupsToAttributes(updatedGroups);
    };

	const addFileToGroup = (groupIndex) => {
		const updatedGroups = [...groups];
		updatedGroups[groupIndex].fichiers.push({
			label: '',
			chemin: cheminFichier,
			nomfichier: '',
			typeFichier: typeFichier,
			affichageClavier: affichageClavier,
			fichierStereo: fichierStereo
		});
		saveGroupsToAttributes(updatedGroups);
	};

    const removeFileFromGroup = (groupIndex, fileIndex) => {
        const updatedGroups = [...groups];
        updatedGroups[groupIndex].fichiers.splice(fileIndex, 1);
        saveGroupsToAttributes(updatedGroups);
    };

    const updateGroupTitle = (groupIndex, newTitle) => {
        const updatedGroups = [...groups];
        updatedGroups[groupIndex].titre = newTitle;
        saveGroupsToAttributes(updatedGroups);
    };

    const updateFile = (groupIndex, fileIndex, key, value) => {
        const updatedGroups = [...groups];
        updatedGroups[groupIndex].fichiers[fileIndex][key] = value;
        saveGroupsToAttributes(updatedGroups);
    };

/*
// inutilis√©	
	const updateOrAdd = (array2D, newItem, compareFn) => {
		const index = array2D.findIndex(item => compareFn(item, newItem));

		if (index !== -1) {
		// Modifier l'√©l√©ment existant
		const updatedArray = [...array2D];
		updatedArray[index] = newItem;
		return updatedArray;
		} else {
		// Ajouter un nouvel √©l√©ment
		return [...array2D, newItem];
		}
	}
*/
//---------------------------------------------------------------------------------------

    return (
	
        <div {...blockProps}>
            {props.isSelected ? (
                <div className="vt--editor-bloc-pupitres">
					<>
					<div className="vt--editor-params-defaut-pupitres">
						<h2>Param√®tres par d√©faut des fichiers "Pupitres"</h2>
						<TextControl
							label="Chemin des fichiers"
							value={cheminFichier}
							onChange={(val) => setAttributes({ cheminFichier: val })}
						/>
						<RadioControl
							label={ 'Type de fichier'}
							/*help={ 'actif => true, inactif => false' }*/
							selected={ typeFichier}
							options={ [
								{ label: 'audio', value: 'a' },
								{ label: 'video', value: 'v' },
							] }
							onChange={ ( value ) => 
								setAttributes( { typeFichier: (value)})
							}
						/>
						<ToggleControl
							label={ 'Afficher le clavier sous le lecteur' }
							checked={ affichageClavier }
							onChange={(value) => setAttributes({ affichageClavier: (value) })}
						/>
						{ affichageClavier && (
							<ToggleControl
								label={ 'Le fichier est st√©r√©o : la voix principale a une piste d√©di√©e' }
								checked={ fichierStereo }
								onChange={(value) => setAttributes({ fichierStereo: (value) })}
							/>
						)}
					</div>
					<div className="vt--editor-panel-wrapper">
					  {groups.map((group, groupIndex) => {
						return (
						  <PanelBody
							className="vt--editor-groupe-pupitres"
							title={`Groupe ${groupIndex + 1}`}
							key={groupIndex}
							initialOpen={true}
						  >
							<TextControl
							  label="Titre du groupe (facultatif)"
							  value={group.titre}
							  onChange={(value) => updateGroupTitle(groupIndex, value)}
							/>

							{group.fichiers.map((file, fileIndex) => {
							  const indexParamsPupitre = `${groupIndex}-${fileIndex}`;

							  // Initialiser les refs s'ils ne le sont pas d√©j√†
							  if (!paramsPupitresRefs.current[indexParamsPupitre]) {
								paramsPupitresRefs.current[indexParamsPupitre] = [
								  file.nomfichier,
								  file.chemin,
								  false,
								  null
								];
							  }

							  const [nomFichier, cheminFichier, uploading, erreurUpload] =
								paramsPupitresRefs.current[indexParamsPupitre];

							  return (
								<div key={fileIndex} className="vt--editor-un-pupitre">
								  <TextControl
									label="Label du pupitre"
									help="Par ex. : S pour Soprano, A pour Alto..."
									value={file.label}
									onChange={(val) => updateFile(groupIndex, fileIndex, 'label', val)}
								  />

								  <TextControl
									label="Chemin du fichier"
									value={file.chemin || cheminFichier}
									onChange={(val) => updateFile(groupIndex, fileIndex, 'chemin', val)}
								  />

								  <TextControl
									label="Nom du fichier"
									value={file.nomfichier}
									readOnly
								  />

								  <div style={{ marginTop: '1em' }}>
									<button
									  type="button"
									  onClick={() => fileInputRefs.current[indexParamsPupitre]?.click()}
									  className="components-button is-secondary"
									>
									  {file.nomfichier ? 'Choisir un nouveau fichier' : 'Choisir un fichier'}
									</button>

									<input
									  type="file"
									  accept="audio/*,video/*"
									  ref={(el) => {
										if (el) {
										  fileInputRefs.current[indexParamsPupitre] = el;
										}
									  }}
									  onChange={(e) => handleFileChange(e, groupIndex, fileIndex)}
									  style={{ display: 'none' }}
									/>
								  </div>

								  {uploading && <p>üì§ T√©l√©versement en cours...</p>}
								  {erreurUpload && <p style={{ color: 'red' }}>‚ùå {erreurUpload}</p>}

								  {/* Pr√©visualisation selon le type de fichier */}
								  {file.nomfichier && (
									<div style={{ marginTop: '1em', maxWidth: '250px' }}>
									  {file.nomfichier.match(/\.(mp3|wav)$/i) && (
										<audio controls src={`${window.location.origin}${file.chemin}/${file.nomfichier}`}>
										  Votre navigateur ne supporte pas l‚Äôaudio.
										</audio>
									  )}
									  {file.nomfichier.match(/\.(mp4|webm)$/i) && (
										<video controls src={`${window.location.origin}${file.chemin}/${file.nomfichier}`}>
										  Votre navigateur ne supporte pas la vid√©o.
										</video>
									  )}
									</div>
								  )}

								  {/* Param√®tres suppl√©mentaires */}
								  <RadioControl
									label="Type de fichier"
									selected={file.typeFichier || typeFichier}
									options={[
									  { label: 'audio', value: 'a' },
									  { label: 'video', value: 'v' }
									]}
									onChange={(val) => updateFile(groupIndex, fileIndex, 'typeFichier', val)}
								  />

								  <ToggleControl
									label="Afficher le clavier sous le lecteur"
									checked={file.affichageClavier || affichageClavier}
									onChange={(val) => updateFile(groupIndex, fileIndex, 'affichageClavier', val)}
								  />

								  {(file.affichageClavier || affichageClavier) && (
									<ToggleControl
									  label="Le fichier est st√©r√©o : la voix principale a une piste d√©di√©e"
									  checked={file.fichierStereo || fichierStereo}
									  onChange={(val) => updateFile(groupIndex, fileIndex, 'fichierStereo', val)}
									/>
								  )}

								  <Button isDestructive onClick={() => removeFileFromGroup(groupIndex, fileIndex)}>
									Supprimer ce pupitre
								  </Button>
								</div>
							  );
							})}

							<Button onClick={() => addFileToGroup(groupIndex)}>
							  Ajouter un pupitre
							</Button>

							<Button
							  isDestructive
							  onClick={() => removeGroup(groupIndex)}
							  style={{ marginTop: '10px' }}
							>
							  Supprimer ce groupe
							</Button>
						  </PanelBody>
						);
					  })}

					  <Button onClick={addGroup} style={{ marginTop: '20px' }}>
						Ajouter un groupe
					  </Button>
					</div>
					</>
                 </div>
            ) : (
                <div>
					Fichiers pupitre
	<div className="vt--une-section">				
        <div className="vt--fichiers-pupitre" style={margin: auto}>
            {groups.map((group, groupIndex) => (
                <div key={groupIndex} className="vt--group-fichiers-pupitre">
                    {group.titre && <div className="vt--group-fichiers-pupitre-titre">{group.titre}</div>}

                    <div className="vt--pupitre-container">
                        {group.fichiers.map((file, fileIndex) => (
                            <div
                                key={fileIndex}
                                className="vt--pupitre-button"
                                data-chemin={file.chemin}
                                data-nomfichier={file.nomfichier}
                                data-type={file.typeFichier}
                                data-clavier={file.affichageClavier}
                                data-stereo={file.fichierStereo}
                            >
                                <div className="vt--pupitre-label"> {file.label} </div>
                            </div>
                        ))}
                    </div>
                </div>
            ))}
        </div>
	</div>
                </div>
            )}
        </div>
    );
}
