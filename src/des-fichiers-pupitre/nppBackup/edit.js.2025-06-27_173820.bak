import { useBlockProps } from '@wordpress/block-editor';
//import { useState } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
import { TextControl, RadioControl, ToggleControl, Button, PanelBody } from '@wordpress/components';
import { useState, useRef } from '@wordpress/element';
import './editor.scss';
import { uploadFileToServer, deleteFileFromServer } from '../../js/vt-files-mngt.js';

export default function Edit(props) {
    const blockProps = useBlockProps();
    const { context, attributes, setAttributes, clientId } = props;
    const { "bloc-fichiers-de-travail/cheminFichiers": cheminFichiers } = context;
    const { cheminFichier, typeFichier, affichageClavier, fichierStereo } = attributes;

    // Initialisation du chemin si absent
    if (!cheminFichier) {
        setAttributes({ cheminFichier: cheminFichiers });
    }
	const fileInputRef = useRef();
	const [uploading, setUploading] = useState(false);
	const [erreurUpload, setErreurUpload] = useState(null);
	
	const cheminFichierServer = ""
	const nomFichierServer = "";
	const groupIndexCourant = "";
	const fileIndexCourant = "";

const handleFileChange = async (e) => {
	const file = e.target.files[0];
	if (!file) return;
	const keyFile = e.target.fileIndex;
	const keyGroup = e.target.groupIndex;
	console.log(e.target);
	
	//const chemin = cheminFichierTutti || 'docs/2025/'; // √† v√©rifier
	setUploading(true);
	setErreurUpload(null);

	try {
		// 1. Supprimer le fichier pr√©c√©dent s'il existe
		if (nomFichierServer) {
			console.log("suppression " + nomFichierServer);
			const resultDel = await deleteFileFromServer(nomFichierServer, cheminFichierServer); // dans vt-files-mngt.js
			console.log(resultDel.comment);
		}

		// 2. Uploader le nouveau fichier
		
		const resultUpload = await uploadFileToServer(file, cheminFichierServer); // dans vt-files-mngt.js
		console.log(resultUpload);
		/*setAttributes({
			nomFichierTutti: resultUpload.nom,
			cheminFichierTutti : resultUpload.chemin,
		});*/
		//updateFile(groupIndexCourant, fileIndexCourant, 'chemin', resultUpload.chemin);
		updateFile(keyGroup, keyFile, 'nomfichier', resultUpload.nom);
		nomFichierServer = resultUpload.nom;
		
		console.log("Upload " + resultUpload.chemin + " - " + resultUpload.nom);
	} catch (err) {
		console.error(err);
		setErreurUpload(err.message);
	} finally {
		setUploading(false);
	}
}
//	const fullUrl = `${cheminFichierServer}/${nomFichierServer}`;

//---------------------------------------------------------------------------------------

    // Parse JSON string into an object for internal manipulation
    const initialGroups = attributes.chaineFichiersPupitre ? JSON.parse(attributes.chaineFichiersPupitre) : [];
    const [groups, setGroups] = useState(initialGroups);

    const saveGroupsToAttributes = (updatedGroups) => {
        // Convert the object back to a JSON string before saving to attributes
        const jsonString = JSON.stringify(updatedGroups);
        setAttributes({ chaineFichiersPupitre: jsonString });
        setGroups(updatedGroups);
    };

    const addGroup = () => {
        const updatedGroups = [...groups, { titre: '', fichiers: [] }];
        saveGroupsToAttributes(updatedGroups);
    };

    const removeGroup = (index) => {
        const updatedGroups = [...groups];
        updatedGroups.splice(index, 1);
        saveGroupsToAttributes(updatedGroups);
    };
/*
    const addFileToGroup = (groupIndex) => {
        const updatedGroups = [...groups];
        updatedGroups[groupIndex].fichiers.push({ label: '', chemin: '' });
        saveGroupsToAttributes(updatedGroups);
    };
*/
	const addFileToGroup = (groupIndex) => {
		const updatedGroups = [...groups];
		updatedGroups[groupIndex].fichiers.push({
			label: '',
			chemin: cheminFichier,
			nomfichier: '',
			typeFichier: typeFichier,
			affichageClavier: affichageClavier,
			fichierStereo: fichierStereo
		});
		saveGroupsToAttributes(updatedGroups);
	};

    const removeFileFromGroup = (groupIndex, fileIndex) => {
        const updatedGroups = [...groups];
        updatedGroups[groupIndex].fichiers.splice(fileIndex, 1);
        saveGroupsToAttributes(updatedGroups);
    };

    const updateGroupTitle = (groupIndex, newTitle) => {
        const updatedGroups = [...groups];
        updatedGroups[groupIndex].titre = newTitle;
        saveGroupsToAttributes(updatedGroups);
    };

    const updateFile = (groupIndex, fileIndex, key, value) => {
        const updatedGroups = [...groups];
        updatedGroups[groupIndex].fichiers[fileIndex][key] = value;
        saveGroupsToAttributes(updatedGroups);
    };
//---------------------------------------------------------------------------------------

    return (
	
        <div {...blockProps}>
            {props.isSelected ? (
                <div>
                    <TextControl
                        label="Chemin par d√©faut des fichiers 'pupitre'"
                        value={cheminFichier}
                        onChange={(val) => setAttributes({ cheminFichier: val })}
                    />
					<RadioControl
						label={ 'Type de fichier par d√©faut'}
						/*help={ 'actif => true, inactif => false' }*/
						selected={ typeFichier}
						options={ [
							{ label: 'audio', value: 'a' },
							{ label: 'video', value: 'v' },
						] }
						onChange={ ( value ) => 
							setAttributes( { typeFichier: (value)})
						}
					/>
					<ToggleControl
						label={ 'Afficher le clavier sous le lecteur' }
						checked={ affichageClavier }
						onChange={(value) => setAttributes({ affichageClavier: (value) })}
					/>
					{ affichageClavier && (
						<ToggleControl
							label={ 'Le fichier est st√©r√©o : la voix principale a une piste d√©di√©e' }
							checked={ fichierStereo }
							onChange={(value) => setAttributes({ fichierStereo: (value) })}
						/>
					)}
					
					{groups.map((group, groupIndex) => (
						
						<PanelBody className="vt--editor-groupe-pupitres"
							title={`Groupe ${groupIndex + 1}`}
							key={groupIndex}
							initialOpen={true}
						>
						
							<TextControl
								label={__('Titre du groupe (facultatif)', 'text-domain')}
								value={group.titre}
								onChange={(value) => updateGroupTitle(groupIndex, value)}
							/>
							{group.fichiers.map((file, fileIndex) => (
								<div key={fileIndex} style={{ marginBottom: '10px' }} className="vt--editor-un-pupitre">
									
									
									<TextControl
										label={__('Label du pupitre', 'text-domain')}
										help={ 'Par ex.: S pour Soprano, A pour Alto, T1 pour T√©nor 1, etc' }
 										value={file.label}
										onChange={(value) => updateFile(groupIndex, fileIndex, 'label', value)}
									/>
									<TextControl
										label={__('Chemin du fichier', 'text-domain')}
										value={file.chemin || cheminFichier}
										onChange={(value) => updateFile(groupIndex, fileIndex, 'chemin', value)}
									/>

									<TextControl
										label={__('Nom du fichier', 'text-domain')}
										value={file.nomfichier}
										readOnly
									/>
									<div style={{ marginTop: '1em' }}>
									  <label className="label css-2o4jwd" style={{ display: 'none' }}>
										{file.nomfichier ? 'Remplacer le fichier' : 'Choisir un fichier'}
									  </label>

									  <div style={{ display: 'flex', alignItems: 'center', gap: '1em' }}>
										<button
										  type="button"
										  onClick={() => fileInputRef.current.click()}
										  className="components-button is-secondary"
										>
										  {file.nomfichier ? 'Choisir un nouveau fichier' : 'Choisir un fichier'}
										</button>

										<span style={{ fontStyle: 'italic', fontSize: '1rem' }}>
										  {file.nomfichier || 'Aucun fichier s√©lectionn√©'}
										</span>

										{/* input cach√© */}
										<input
										  type="file"
										  accept="audio/*,video/*"
										  ref={fileInputRef}
										  onChange={handleFileChange}
										  style={{ display: 'none' }}
										/>
									  </div>
									</div>
									{uploading && <p>üì§ T√©l√©versement en cours...</p>}

									{erreurUpload && <p style={{ color: 'red' }}>‚ùå {erreurUpload}</p>}
																				{nomFichierServer && (
										<div style={{ marginTop: '1em', width: '100%', maxWidth: '250px' }}>
											<p style={{ display: 'none' }}><strong>Fichier s√©lectionn√© :</strong> {nomFichierServer}</p>

											{nomFichierServer.match(/\.(mp3|wav)$/i) && (
												<audio controls src={fullUrl} >
													Votre navigateur ne supporte pas l‚Äôaudio.
												</audio>
											)}

											{nomFichierServer.match(/\.(mp4|webm)$/i) && (
												<video controls src={fullUrl}>
													Votre navigateur ne supporte pas la vid√©o.
												</video>
											)}
																										 

											{!nomFichierServer.match(/\.(mp3|wav|mp4|webm)$/i) && (
												<a href={fullUrl} target="_blank" rel="noopener noreferrer">
													üìÑ Ouvrir le fichier
												</a>
											)}
										</div>
									)}
												
																															

									
									<RadioControl
										label={ 'Type de fichier'}
										selected={ file.typeFichier || typeFichier }
										options={ [
											{ label: 'audio', value: 'a' },
											{ label: 'video', value: 'v' },
										] }
										onChange={ ( value ) => updateFile(groupIndex, fileIndex, 'typeFichier', value) }
									/>
									<ToggleControl
										label={ 'Afficher le clavier sous le lecteur' }
										checked={ file.affichageClavier || affichageClavier}
										onChange={(value) => updateFile(groupIndex, fileIndex, 'affichageClavier', value)}
									/>
									{ affichageClavier&& (
										<ToggleControl
											label={ 'Le fichier est st√©r√©o : la voix principale a une piste d√©di√©e' }
											checked={ file.fichierStereo || fichierStereo }
											onChange={(value) => updateFile(groupIndex, fileIndex, 'fichierStereo', value)}
										/>
									)}
									<Button
										isDestructive
										onClick={() => removeFileFromGroup(groupIndex, fileIndex)}
									>
										{__('Supprimer ce pupitre', 'text-domain')}
									</Button>
								</div>
							))}
							<Button onClick={() => addFileToGroup(groupIndex)}>
								{__('Ajouter un pupitre', 'text-domain')}
							</Button>
							<Button
								isDestructive
								onClick={() => removeGroup(groupIndex)}
								style={{ marginTop: '10px' }}
							>
								{__('Supprimer ce groupe', 'text-domain')}
							</Button>
						</PanelBody>
					))}
					<Button
						isPrimary
						onClick={addGroup}
						style={{ marginTop: '20px' }}
					>
						{__('Ajouter un groupe', 'text-domain')}
					</Button>
					
                 </div>
            ) : (
                <div>
					Fichiers pupitre
                </div>
            )}
        </div>
    );
}
