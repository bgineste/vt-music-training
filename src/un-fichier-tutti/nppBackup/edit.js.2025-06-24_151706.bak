import { useBlockProps } from '@wordpress/block-editor';
//import useHasSiblingBlock from '../../hooks/useHasSiblingBlock';
import { __ } from '@wordpress/i18n';

//import getTypeParentBlock from '../../hooks/getTypeParentBlock';
import { TextControl, RadioControl, ToggleControl } from '@wordpress/components';
import { useState } from '@wordpress/element';
import './editor.scss';
import { uploadFileToServer, deleteFileFromServer } from '../../js/vt-functions.js';

export default function Edit(props) {
    const blockProps = useBlockProps();
    const { context, attributes, setAttributes, clientId } = props;
    const { "bloc-fichiers-de-travail/cheminFichiers": cheminFichiers } = context;
    const { labelFichierTutti, cheminFichierTutti, nomFichierTutti, typeFichierTutti, affichageClavier, fichierStereo } = attributes;

    // Initialisation du chemin si absent
    if (!cheminFichierTutti) {
        setAttributes({ cheminFichierTutti: cheminFichiers });
    }

	const [uploading, setUploading] = useState(false);
	const [erreurUpload, setErreurUpload] = useState(null);

const handleFileChange = async (e) => {
	const file = e.target.files[0];
	if (!file) return;

	//const chemin = cheminFichierTutti || 'docs/2025/'; // √† v√©rifier
	setUploading(true);
	setErreurUpload(null);

	try {
		// 1. Supprimer le fichier pr√©c√©dent s'il existe
		if (nomFichierTutti) {
			console.log("suppression " + nomFichierTutti);
			const resultDel = await deleteFileFromServer(nomFichierTutti, cheminFichierTutti); // dans vt-functions.js
			console.log(resultDel.comment);
		}

		// 2. Uploader le nouveau fichier
		
		const resultUpload = await uploadFileToServer(file, cheminFichierTutti); // dans vt-functions.js
		setAttributes({
			nomFichierTutti: resultUpload.nom,
			cheminFichierTutti : resultUpload.chemin,
		});
		console.log("Upload " + resultUpload.chemin + " - " + resultUpload.nom);
	} catch (err) {
		console.error(err);
		setErreurUpload(err.message);
	} finally {
		setUploading(false);
	}
}
	const fullUrl = `${cheminFichierTutti}/${nomFichierTutti}`;


    return (
	
        <div {...blockProps}>
            {props.isSelected ? (
                <div>
                    <TextControl
                        label="Label du fichier 'tutti' (audio ou vid√©o)"
						help={ 'Par ex.: Video/partition Interpr√®te' }
                        value={labelFichierTutti}
                        onChange={(val) => setAttributes({ labelFichierTutti: val })}
                    />
                    <TextControl
                        label="Chemin du fichier 'tutti'"
                        value={cheminFichierTutti}
                        onChange={(val) => setAttributes({ cheminFichierTutti: val })}
                    />
                    <label class="label css-2o4jwd">
                        Nom du fichier
					</label>
						<input class="components-text-control__input" value={nomFichierTutti} readonly />

					<label class="label css-2o4jwd">
					Choisir un fichier
					<input
						type="file"
						accept="audio/*,video/*"
						onChange={handleFileChange}
						style={{ marginTop: '1em' }}
					/>
					</label>

					{uploading && <p>üì§ T√©l√©versement en cours...</p>}

					{erreurUpload && <p style={{ color: 'red' }}>‚ùå {erreurUpload}</p>}

					{nomFichierTutti && (
						<div style={{ marginTop: '1em' }}>
							<p><strong>Fichier s√©lectionn√© :</strong> {nomFichierTutti}</p>

							{nomFichierTutti.match(/\.(mp3|wav)$/i) && (
								<audio controls src={fullUrl} style={{ width: '100%' }}>
									Votre navigateur ne supporte pas l‚Äôaudio.
								</audio>
							)}

							{nomFichierTutti.match(/\.(mp4|webm)$/i) && (
								<video controls src={fullUrl} style={{ width: '100%' }}>
									Votre navigateur ne supporte pas la vid√©o.
								</video>
							)}

							{!nomFichierTutti.match(/\.(mp3|wav|mp4|webm)$/i) && (
								<a href={fullUrl} target="_blank" rel="noopener noreferrer">
									üìÑ Ouvrir le fichier
								</a>
							)}
						</div>
					)}
								
					<RadioControl
						label="Type de fichier"
						/*help={ 'actif => true, inactif => false' }*/
						selected={ typeFichierTutti}
						options={ [
							{ label: 'audio', value: 'a' },
							{ label: 'video', value: 'v' },
						] }
						onChange={ ( value ) => 
							setAttributes( { typeFichierTutti: (value)})
						}
					/>
					<ToggleControl
						label={ 'Afficher le clavier sous le lecteur' }
						checked={ affichageClavier }
						onChange={(value) => setAttributes({ affichageClavier: (value) })}
					/>
					{ affichageClavier && (
						<ToggleControl
							label={ 'Le fichier est st√©r√©o : la voix principale a une piste d√©di√©e' }
							checked={ fichierStereo }
							onChange={(value) => setAttributes({ fichierStereo: (value) })}
						/>
					)}
                 </div>
            ) : (
                <div>
					{ labelFichierTutti}
                </div>
            )}
        </div>
    );
}
