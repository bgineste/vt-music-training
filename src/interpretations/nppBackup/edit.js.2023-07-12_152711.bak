/**
 * Retrieves the translation of text.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-i18n/
 */
import { __ } from '@wordpress/i18n';

/**
 * React hook that is used to mark the block wrapper element.
 * It provides all the necessary props like the class name.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#useblockprops
 */
import { useBlockProps } from '@wordpress/block-editor';

/**
 * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.
 * Those files can contain any CSS code that gets applied to the editor.
 *
 * @see https://www.npmjs.com/package/@wordpress/scripts#using-css
 */
import './editor.scss';

/**
 * The edit function describes the structure of your block in the context of the
 * editor. This represents what the editor will render when the block is used.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit
 *
 * @return {WPElement} Element to render.
 */

export default function Edit( props ) {
	const blockProps = useBlockProps()

	
	// La fonction qui met à jour la valeur
	const onChangeContent = event => {
		let liste = event.target.value
//		let items = liste.split('&')
//		console.log(items)
//		items = items.map(x => x.split('|'))
//		console.log(items)
		props.setAttributes( { content: liste } )
//		props.setAttributes( { prononciations: items } )
		console.log(props)
	}
	// La fonction qui met à jour l'option
	const onChangeOption = event => {
		let result =  !props.attributes.selection 
		props.setAttributes( { selection: result } )
		console.log(props)
	}
	function items(content) {
		 let aitems = content.split('&')
	  return aitems.map(x => x.split('|'))
	}
	return (
		<div { ...blockProps }>
			{ props.isSelected ? ( 
				<><label>Chaine textes|fichiers<input
					type='text'
					value={ props.attributes.content }
					onChange={ onChangeContent }
					placeholder={ __('Write a text!', 'vt-gut-blocks' ) }
				/></label>
				<label>
				<input type='checkbox' value='option' checked={props.attributes.selection} onChange={ onChangeOption }/>option</label>				</>
			) : ( <>   <div  className="vt-bloc-prononciation">
	
      { 
		  items(props.attributes.content).map((a, index) => (
        <div key={index}>{a[0]} / {a[1]}</div>
      ))}
    </div>
<div>{props.attributes.selection ?('sélectionné') : ('pas sélectionné')} </div></>	) }
		</div>
	)
}

