/**
 * Retrieves the translation of text.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-i18n/
 */
import { __ } from '@wordpress/i18n';

/**
 * React hook that is used to mark the block wrapper element.
 * It provides all the necessary props like the class name.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#useblockprops
 */
import { useBlockProps } from '@wordpress/block-editor';

/**
 * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.
 * Those files can contain any CSS code that gets applied to the editor.
 *
 * @see https://www.npmjs.com/package/@wordpress/scripts#using-css
 */
import './editor.scss';

/**
 * The edit function describes the structure of your block in the context of the
 * editor. This represents what the editor will render when the block is used.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit
 *
 * @return {WPElement} Element to render.
 */

export default function Edit( props ) {
	const blockProps = useBlockProps()

	
	// La fonction qui met à jour la valeur
	const onChangeContent = event => {
		let liste = event.target.value
		props.setAttributes( { chaineDescriptive: liste } )
		console.log(props)
	}
	const onChangeContent2 = event => {
		let liste = event.target.value
		props.setAttributes( { tstring: liste } )
		console.log(props)
	}
	// La fonction qui met à jour l'option
	const onChangeOption = event => {
		props.setAttributes({selection: event.target.checked})
		console.log(props)
	}

	//la fonction qui convertit en array() la chaine passée en argument
	const items = (arg) => {
		 let aitems = arg.split('&')
	  return aitems.map(x => x.split('|'))
	}
	
	return (
		<div { ...blockProps }>
			{ props.isSelected ? ( 
				<>
					<label>Chaine textes|fichiers<br />
						<input type='text' value={ props.attributes.chaineDescriptive } onChange={ onChangeContent } placeholder={ __('Write a text!', 'vt-gut-blocks' ) } />
					</label>
					<label>Chaine sans source<br />
						<input type='text' value={ props.attributes.tstring } onChange={ onChangeContent2 } 		placeholder={ __('Write a text!', 'vt-gut-blocks' ) } />
					</label>
					<label>
						<input type='checkbox' checked={(props.attributes.selection)} onChange={ onChangeOption }/>option
					</label>
				</>
			) : ( 
				<>
					<div  className="vt-bloc-prononciation">
					  { 
						  items(props.attributes.chaineDescriptive).forEach((item, index) => (
								<div key={index}>{item[0]} / {item[1]}</div>
								console.log(item[0])
					  ))}
					</div>
<div>{ props.attributes.selection ? ('sélectionné') : ('pas sélectionné')} </div>
</>	) }
		</div>
	)
}

